import streamlit as st
import pandas as pd
import base64
import datetime
import pymongo
import hmac
#from bson import ObjectId

def check_password():
    """Returns `True` if the user had the correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if hmac.compare_digest(st.session_state["password"], st.secrets["password"]):
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # Don't store the password.
        else:
            st.session_state["password_correct"] = False

    # Return True if the password is validated.
    if st.session_state.get("password_correct", False):
        return True

    # Show input for password.
    st.text_input(
        "Password", type="password", on_change=password_entered, key="password"
    )
    if "password_correct" in st.session_state:
        st.error("üòï Password incorrect")
    return False


if not check_password():
    st.stop()  # Do not continue if check_password is not True.

@st.cache_resource
def init_connection():
    return pymongo.MongoClient(**st.secrets["mongo"])

client = init_connection()

sex_mapping = {'male': 0, 'female': 1}
answers = {}

#Comp = [
#    "Organisation du mat√©riel (ex. mat√©riel rang√© sur la table)",
#    "Concentration sur t√¢ches exigeantes (ex. reste sur une activit√© sans se distraire)",
#    "Application des instructions (ex. suit une directive sans rappel)",
#    "R√©activit√© mod√©r√©e aux distractions externes (ex. ignore les bruits alentours lors d'une t√¢che)",
#    "Fluidit√© dans les transitions (ex. change d'activit√© sans d√©lai)",
#    "Capacit√© √† rester calme (ex. reste assis pendant une histoire)",
#    "Gestion des mouvements et manipulations (ex. ne met pas d'objets √† la bouche)",
#    "R√©gulation des prises de parole (ex. parle √† des moments appropri√©s)",
#    "Adaptation sociale et √©motionnelle (ex. joue sans exclure les autres)",
#    "Engagement dans les jeux collectifs (ex. suit les r√®gles du jeu)"
#    ]

Comp = [
     "L'utilisation de la planche permet d'am√©liorer ma mobilit√©.",
    "L'utilisation de la planche am√©liore mon ind√©pendance dans les activit√©s quotidiennes.",
    "Je trouve que la planche s'adapte facilement √† diff√©rents environnements et situations.",
    "Je pense que l'utilisation de la planche r√©duit mon risque de blessures lors des transferts.",
    "Je trouve globalement la planche encombrante et difficile √† transporter.",
    "J'ai peur de basculer ou de tomber quand j'utilise la planche.",
    "L'utilisation de la planche est inconfortable.",
    "J'utilise la planche uniquement parce que je n'ai pas d'autres options.",
    "Je pr√©f√®re utiliser d'autres m√©thodes que la planche pour les transferts (aide d'un aidant, support mural, etc.).",
    "Le bois semble adapt√© en terme de poids.",
    "Le bois semble adapt√© en terme de durabilit√©.",
    "Le polycarbonate semble adapt√© en terme de poids.",
    "Le polycarbonate semble adapt√© en terme de durabilit√©.",
    "Les mat√©riaux en r√©sine semblent adapt√©s en terme de poids.",
    "Les mat√©riaux en r√©sine semblent adapt√©s en terme de durabilit√©.",
    "Les mat√©riaux en composite semblent adapt√©s en terme de poids.",
    "Les mat√©riaux en composite semblent adapt√©s en terme de durabilit√©.",
    "La planche offre actuellement un √©quilibre optimal pour pr√©venir le glissement non d√©sir√©.",
    "Un antid√©rapant semble n√©cessaire pour am√©liorer la s√©curit√© de la glisse.",
    "Ma glisse est identique peu importe les v√™tements que je porte.",
    "Je peux r√©aliser la glisse en s√©curit√© m√™me en √©tant totalement d√©nud√©.",
    "Une forme courbe me semblerait adapt√©e en terme de fonctionnalit√©.",
    "Une forme courbe me semblerait adapt√©e en terme de stabilit√© et de s√©curit√©.",
    "Une forme courbe me semblerait adapt√©e en terme de fonctionnalit√©.",
    "Une forme courbe me semblerait adapt√©e en terme de stabilit√© et de s√©curit√©.",
    "Une encoche sur la planche me semblerait adapt√©e en terme de fonctionnalit√©.",
    "Une encoche sur la planche me semblerait adapt√©e en terme de stabilit√© et de s√©curit√©.",
    "Une accroche permettant de fixer la planche au fauteuil semble indispensable √† une planche innovante.",
    "Un syst√®me permettant √† la planche de se plier semble indispensable √† une planche innovante.",
    "Un syst√®me permettant √† la planche de se monter sur plusieurs supports semble indispensable √† une planche innovante.",
    "Une technologie int√©gr√©e √† la planche pour pr√©venir les escarres serait une innovation notable pour les utilisateurs.",
    "Une technologie int√©gr√©e √† la planche pour r√©aliser sa pes√©e lors des transferts serait une innovation notable pour les utilisateurs.",
    "Des capteurs int√©gr√©s √† la planche pour surveiller la glisse lors des transferts repr√©senteraient une innovation notable pour les utilisateurs."
]





st.markdown(
        """<style>
        div[class*="stSlider"] > label > div[data-testid="stMarkdownContainer"] > p {
        font-size: 20px;
                }
        </style>
                """, unsafe_allow_html=True)


st.markdown(
    """
    <style>
    .centered_button {
        display: flex;
        justify-content: center;
    }
    </style>
    """,
    unsafe_allow_html=True
)


st.write("""
# Thermometre Questionnaire
""")


st.sidebar.header('Informations')

#slider_values = [1,2,3,4]
#slider_values = [1,2,3]
slider_values = [1,2,3,4,5,6]
#slider_strings = ["Tr√®s insuffisant", "Insuffisant", "Satisfaisant", "Tr√®s satisfaisant"]
#slider_strings = ["Non", "Un peu", "Oui"]
slider_strings = ["Pas du tout d'accord", "Plut√¥t pas d'accord", "Plut√¥t d'accord", "Assez d'accord", "Tr√®s d'accord", "Compl√®tement d'accord"]

def stringify(i:int = 0) -> str:
    return slider_strings[i-1]

#T1 = st.select_slider(
#    "Je quitte souvent ma place sans n√©cessit√© lors d'une r√©union.",
#    options=slider_values,
#    value=1,
#    format_func=stringify)

#def save_and_download_csv(df):
#    csv_string = df.to_csv(index=False,sep=';')
    b64 = base64.b64encode(csv_string.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="features.csv">Download CSV File</a>'
    st.markdown(href, unsafe_allow_html=True)

# def custom_date_input(label, min_date=None, max_date=None):
#     if min_date is None:
#         min_date = datetime.datetime(year=1900, month=1, day=1)
#     if max_date is None:
#         max_date = datetime.datetime(year=2100, month=12, day=31)
#     year = st.number_input("Year", min_value=min_date.year, max_value=max_date.year, step=1, value=min_date.year)
#     month = st.number_input("Month", min_value=1, max_value=12, step=1, value=min_date.month)
#     day = st.number_input("Day", min_value=1, max_value=31, step=1, value=min_date.day)
#     try:
#         date_input = datetime.datetime(year=year, month=month, day=day)
#         if min_date <= date_input <= max_date:
#             return date_input
#         else:
#             st.error("Please enter a date within the specified range.")
#             return None
#     except ValueError:
#         st.error("Please enter a valid date.")
#         return None

def write_data(new_data):
    # Write new data to the database
    db = client.alphapv
    db.test.insert_one(new_data)
    


def user_input_features():
        #current_date = datetime.date.today()
        surname = st.sidebar.text_input("Nom")
        name = st.sidebar.text_input("Pr√©nom")
        date = st.sidebar.date_input("Date de naissance", datetime.date(2010, 1, 1))
        #age = current_date.year - date.year - ((current_date.month, current_date.day) < (date.month, date.day))
        sex = st.sidebar.selectbox('Sex',('Homme','Femme'))
        #study = st.sidebar.selectbox("Niveau d'etude",('CAP/BEP','Baccalaur√©at professionnel','Baccalaur√©at g√©n√©ral', 'Bac +2 (DUT/BTS)', 'Bac +3 (Licence)',
        #                                               'Bac +5 (Master)', 'Bac +7 (Doctorat, √©coles sup√©rieurs)'))
        #questionnaire = st.sidebar.selectbox('Questionnaire',('TRAQ','FAST','TRAQ+FAST'))
        st.write("""## Cet enfant se distingue des autres enfants de son √¢ge de la mani√®re suivante:""")
        for i, question in enumerate(Comp, start=1):
            slider_output = st.select_slider(
            f"{question}",
            options=slider_values,
            value=1,
            format_func=stringify
            )
            answers[f"THERM{i}"] = slider_output


        user_data = {"lastName": surname,
                     'firstName': name,
                     'birthDate': date.isoformat(),
                     'sex': sex}
        answers_data = answers

        document = {
        #"_id": ObjectId(),  # Generate a new ObjectId
        "user": user_data,
        "answers": answers_data
        #"__v": 0
        }
                
        return document



document = user_input_features()

#if st.button('Enregisterez'):
#    write_data(document)
#save_and_download_csv(df)
#st.write(document)
# for centering the page
#input_date = custom_date_input("Select a date")
#if input_date:
#    st.write("Selected date:", input_date)
     
     
left_co, cent_co,last_co = st.columns(3)
with cent_co:
    button = st.button('Enregisterez')
    st.image("clinicogImg.png", width=200)
    
if button:
     write_data(document)
     st.write("Merci d'avoir particip√©(e) √† ce questionnaire")
     


     

